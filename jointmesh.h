/* Code generated by "ordnat". DO NOT EDIT. */
#ifndef __JOINTMESH_H__
#define __JOINTMESH_H__

#include <stdlib.h>
#include <stdint.h>
#include <string.h>
#include <assert.h>
#include "math.h"
#include <stdio.h>

/* mesh structure with joint memory allocation */
struct joint_mesh {
  Vector3 *positions;
  int *indices;
  Vector2 *uvs;

  void *memory_block;
  int array_count;
  int32_t offset[3];
};

static inline struct joint_mesh alloc_joint_mesh(void *(*mem_allocator)(size_t), size_t n_positions, size_t n_indices, size_t n_uvs) {
  int32_t current_offset = 0;
  struct joint_mesh data = { 0 };
  data.array_count = 3;

  current_offset += ((sizeof(Vector3)) * (n_positions));
  data.offset[0] = current_offset;

  current_offset += ((sizeof(int)) * (n_indices));
  data.offset[1] = current_offset;

  current_offset += ((sizeof(Vector2)) * (n_uvs));
  data.offset[2] = current_offset;

  data.memory_block = mem_allocator(current_offset);

  data.positions = (Vector3 *)(data.memory_block);
  data.indices = (int *)((char *)(data.memory_block) + (data.offset[0]));
  data.uvs = (Vector2 *)((char *)(data.memory_block) + (data.offset[1]));

  return data;
}

struct joint_mesh *joint_mesh_copy(void *(*mem_allocator)(size_t), struct joint_mesh *lhs, struct joint_mesh *rhs) {
  if (lhs == rhs) {
    return rhs;
  }
  assert(((void) "lhs cannot be null", lhs != NULL));
  assert(((void) "rhs cannot be null", rhs != NULL));

  if (lhs->memory_block != rhs->memory_block) {
    rhs->memory_block = mem_allocator(lhs->offset[2]);
    if (rhs->memory_block == NULL) {
      return NULL;
    }
    memcpy(rhs->memory_block, lhs->memory_block, lhs->offset[2]);
  }

  rhs->array_count = lhs->array_count;

  rhs->offset[0] = lhs->offset[0];
  rhs->offset[1] = lhs->offset[1];
  rhs->offset[2] = lhs->offset[2];

  rhs->positions = (Vector3 *)(rhs->memory_block);
  rhs->indices = (int *)((char *)(rhs->memory_block) + (rhs->offset[0]));
  rhs->uvs = (Vector2 *)((char *)(rhs->memory_block) + (rhs->offset[1]));

  return rhs;
}

#endif /* __JOINTMESH_H__ */
